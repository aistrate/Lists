Frequently-used Git commands:

$ git status
$ git status -s                   # just name and status

$ git status -unormal             # show untracked files and directories;
                                  # same as 'git status'
$ git status -uall                # also show individual files in untracked directories
$ git status -u                   # same as 'git status -uall'
$ git status -uno                 # don't show untracked files

$ git add .
$ git rm <file>
$ git commit -m 'message'
$ git commit -a -m 'message'      # add (modified only) and rm
$ git commit -am 'message'
$ git push origin
$ git push origin master
$ git pull origin
$ git pull origin master

$ git <cmd> --help

$ git diff                    # unstaged changes
$ git diff --cached           # staged changes
$ git diff HEAD               # both unstaged and staged changes
$ git diff HEAD^ HEAD         # compare last two commits
$ git diff HEAD^              # compare (unstaged, staged and commited) with commit before last
$ git diff --stat             # summary (only changed-line counts)
$ git diff --stat --cached

$ git log -3
$ git log --max-count=3
$ git log --oneline --graph
$ git log --oneline
$ git log --format=oneline --abbrev-commit    # same as the above
$ git log --pretty=oneline --abbrev-commit    # same
$ git shortlog
$ git log --format=format:%s                  # same
$ git shortlog -w                             # wrap long lines

$ git show --name-status               # list of files in the last commit
$ git show --name-status HEAD          # also works with HEAD^, HEAD^^, etc.
$ git show --name-status b3b87ff       # find checksums with: 'git log --oneline'
$ git show --pretty="format:" --name-status   # don't show the commit header
$ git diff --name-status HEAD^ HEAD           # (almost) same result as the above
$ git diff-tree --name-status -r HEAD         # same result as the above
                                              # -r means recursive
$ git ls-tree --name-only -r HEAD             # list ALL files in the snapshot
                                              # file status is not available

$ git config --list
$ git config --global --list
$ git config --global user.name "Adrian Istrate"
$ git config --global user.email "adrian.istrate@yahoo.com"
$ git config --global --unset xxx

$ git clone git@github.com:aistrate/Lists.git

$ git merge -m 'message' origin/master

$ git checkout <file>
$ git checkout -- .

$ git commit --amend --author='Adrian Istrate <adrian.istrate@yahoo.com>'
  (then in vim:   :wq)



Branching:

$ git branch                 # list all branches

$ git checkout -b <name>     # create and immediately switch to a branch

$ git branch <name>          # create new branch
$ git checkout <name>        # switch to branch

$ git branch -d <name>       # delete a branch

$ git log --oneline --graph  # show the branching graph

$ git log --oneline <name> ^master   # show only commits that are in the <name> 
                                     # branch, but not in the master branch;
$ git log --oneline master ^<name>   # in master, but not in <name>

$ git log --oneline --decorate --graph -10       # show ref names and tags
$ git log --oneline --decorate=full --graph -10

$ git tag -a v1.0                    # tag the last commit
$ git tag -a v0.9 <checksum>         # tag an older commit



Tricks:

- the string '--' within a command separates the options from the file paths

- to commit all changes, including modified, new and deleted (or renamed/moved) files:

    $ git add .                      # (stage) new and modified
    $ git commit -a -m 'message'     # (commit) staged, modified and deleted

- to undo changes to an unstaged file ("Undo pending changes..." in VS):

    $ git checkout <file>

    This will restore the file from the index (staging area), or if it's not there, from the database (the last commit).

- after making local changes BEFORE pulling the latest version, which was pushed from another machine:

    $ git merge -m 'message' origin/master

- when interacting with GitHub, if running Git causes a crash (with a "Do you want to start debugging?" message), try one of the following:
    - run commands 'ls' and/or 'pwd' in the repository folder (not the '.git' folder);
    - run 'cd ..', then come back with 'cd <folder>';
    - to test if git will work, run 'ssh git@github.com', or 'ssh -v git@github.com' (verbose)

- to unstage a file:

    $ git reset HEAD -- <file>

- to undo the last commit (before pushing to a remote):

    $ git reset --soft HEAD^
	(Does not touch the index file nor the working tree at all, but requires them to be in a good order. This leaves all your changed files "Changes to be committed", as git status would put it.)

    $ git reset --hard HEAD^
    (Matches the working tree and index to that of the tree being switched to. Any changes to tracked files in the working tree since <commit> are lost.)

    Beware that if the commit was already pushed to a remote, the next push will be rejected, unless a manual merge is done first.

- to define a Git alias (shortcut), for example 'git unstage' for 'git reset HEAD':

    $ git config --global alias.unstage "reset HEAD"

    All arguments after the alias will be passed on, so running 'git unstage <file>' will work like 'git reset HEAD <file>'.

- to enable pulling/pushing by a simple 'git pull' or 'git push' (not necessarily followed by 'origin master'):

    $ git config --global branch.master.remote origin
    $ git config --global branch.master.merge refs/heads/master

- if a passphrase (password) is asked for every time ssh is talking to GitHub: use ssh-agent to store the passphrase securely. This can be done with a bash script, to be put in .bashrc or .profile (see http://help.github.com/working-with-key-passphrases/). The ssh-agent.exe service will remember the passphrase for the duration of the Windows session. (On Mac OS X, Keychain will store it permanently.)

- the Home folder, where various configuration files are looked for by Git and MSYS (.gitconfig, .profile, .bashrc, etc.): "U:\" at work, "C:\Documents and Settings\Adrian" at home, and "~" on the Mac

- to turn on coloring for terminal output:

    $ git config --global color.ui true
